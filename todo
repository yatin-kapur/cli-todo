#!/usr/bin/python3

from datetime import date, timedelta
import calendar
import pymysql
import sys
from collections import OrderedDict
import pyfiglet
from termcolor import colored
import os
import click

class Tasks:
    def __init__(self, rows):
        self.rows = rows
        self.tasks = self.initialize_items()

    def initialize_items(self):
        tasks = OrderedDict()
        n = len(self.rows)
        for i, row in enumerate(self.rows):
            t = TaskItem(row)
            tasks[t.id] = t

        return tasks

    def display(self):
        # keep track of previous day for output formatting
        prev_day = 10
        for id, task in self.tasks.items():
            if prev_day != task.days:
                if prev_day != 10:
                    click.echo()
                prev_day = task.days

            click.echo(task.show())

class TaskItem:
    def __init__(self, data):
        self.id = data[0]
        self.task = data[1]
        self.finish_by = data[2]
        self.day_of_week = calendar.day_name[self.finish_by.weekday()]
        self.days = (self.finish_by - date.today()).days
        self.completed = data[3]
        self.output = self.show()

    def show(self):
        output = "{:>2} | {:<10} | {}".format(
                self.id, 
                self.day_of_week, 
                self.task
        )

        color = 'green' if self.completed else 'red'

        return colored(output, color)

def get_cxn():
    # Connect to the database
    connection = pymysql.connect(host='localhost',
                                user='root',
                                password='wplqsym',
                                db='todo')

    return connection

def welcome():
    ascii_banner = pyfiglet.figlet_format("ToDo List")
    click.echo(ascii_banner)

def clear():
    os.system('clear')

def show(query):
    clear()
    welcome()
    cxn = get_cxn()
    cursor = cxn.cursor()

    cursor.execute(query)
    rows = cursor.fetchall()

    # initialize tasks list
    tasks = Tasks(rows)
    tasks.display()

@click.group(invoke_without_command=True, help='displays list of incomplete tasks')
@click.pass_context
def todo(ctx):
    query = """
            select id, task, finish_by, completed
            from tasks 
            where completed = false
            order by finish_by;
            """
    if ctx.invoked_subcommand is None:
        show(query)
    else:
        pass

@todo.command(help='USAGE: todo all [n]')
@click.argument('n', required=True)
def all(n):
    query = """
            with done as (
                select id, task, finish_by, completed
                from tasks
                where completed = true
                order by finish_by desc
                limit {}
            ), 
            todo as (
                select id, task, finish_by, completed
                from tasks 
                where completed = false
            )
            select * from todo
            union
            select * from done
            order by completed desc, finish_by;
            """.format(n)
    show(query)

@todo.command(help = 'USAGE: todo add "[task]" [days]')
@click.argument('task', required=True)
@click.argument('days', required=True)
def add(task, days):
    cxn = get_cxn()
    cursor = cxn.cursor()

    query = """
        insert into 
        tasks (task, finish_by, completed) 
        values ('{}', date_add(current_date, interval {} day), 0);
        """.format(
            task,
            days
        )

    cursor.execute(query)
    cxn.commit()

@todo.command(help = 'USAGE: todo delete [id]')
@click.argument('id', required=True)
def delete(id):
    cxn = get_cxn()
    cursor = cxn.cursor()
    query = """
            delete from tasks
            where id = {};
            """.format(
                id
            )

    cursor.execute(query)
    cxn.commit()

@todo.command(help = 'USAGE: todo edit [id] "[task]"')
@click.argument('task', required=True)
@click.argument('id', required=True)
def edit(task, id):
    cxn = get_cxn()
    cursor = cxn.cursor()
    query = """
        update tasks
        set task = '{}'
        where id = {};
        """.format(
            task,
            id
        )

    cursor.execute(query)
    cxn.commit()

@todo.command(help = 'USAGE: todo days [id] [days]')
@click.argument('id', required=True)
@click.argument('days', required=True)
def days(id, days):
    cxn = get_cxn()
    cursor = cxn.cursor()
    query = """
            update tasks
            set finish_by = date_add(current_date, interval {} day)
            where id = {};
            """.format(
                days,
                id
            )

    cursor.execute(query)
    cxn.commit()

@todo.command(help = 'USAGE: todo complete [id]')
@click.argument('id', required=True)
def complete(id):
    cxn = get_cxn()
    cursor = cxn.cursor()
    query = """
            update tasks
            set completed = true
            where id = {};
            """.format(
                id
            )

    cursor.execute(query)
    cxn.commit()

@todo.command(help = 'USAGE: todo incomplete [id]')
@click.argument('id', required=True)
def incomplete(id):
    cxn = get_cxn()
    cursor = cxn.cursor()
    query = """
            update tasks
            set completed = false
            where id = {};
            """.format(
                id
            )

    cursor.execute(query)
    cxn.commit()

if __name__ == '__main__':
    todo()
