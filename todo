#!/usr/bin/python3

from datetime import date, timedelta
import calendar
import pymysql
import sys
from collections import OrderedDict
import pyfiglet
from termcolor import colored

class Tasks:
    def __init__(self, rows):
        self.rows = rows
        self.tasks = self.initialize_items()

    def initialize_items(self):
        tasks = OrderedDict()
        n = len(self.rows)
        for i, row in enumerate(self.rows):
            t = TaskItem(row)
            tasks[t.id] = t

        return tasks

    def display(self, show_id=False):
        # keep track of previous day for output formatting
        prev_day = 10
        for id, task in self.tasks.items():
            if prev_day != task.days:
                if prev_day != 10:
                    print()
                prev_day = task.days

            print(task.show(show_id))

class TaskItem:
    def __init__(self, data):
        self.id = data[0]
        self.task = data[1]
        self.finish_by = data[2]
        self.day_of_week = calendar.day_name[self.finish_by.weekday()]
        self.days = (self.finish_by - date.today()).days
        self.completed = data[3]
        self.output = self.show()

    def show(self, show_id=False):
        o = "{:>2} | {:<10} | {}".format(
                self.id, 
                self.day_of_week, 
                self.task
        )
        output = "{:<10} | {}".format(
            self.day_of_week,
            self.task
        )

        ret_val = o if show_id else output
        color = 'green' if self.completed else 'red'

        return colored(ret_val, color)

def get_cxn():
    # Connect to the database
    connection = pymysql.connect(host='localhost',
                                user='root',
                                password='wplqsym',
                                db='todo')

    return connection

def help():
    default = "todo [id - optional]"
    all = 'todo all [n] [id - optional]'
    add = 'todo add "[task]" [days]'
    delete = 'todo delete [id]'
    edit = 'todo edit [id] ["task"]'
    days = 'todo days [id] [days]'
    completed = 'todo complete [id]'
    incomplete = 'todo incomplete [id]'
    statement = """{:<40}: displays list of incomplete tasks, choose to show id or not
{:<40}: displays all incomplete and last n completed tasks by date
{:<40}: how to add a task to the list
{:<40}: delete task of given id
{:<40}: edit task of given id
{:<40}: reset days of task with given id
{:<40}: mark task of id as completed
{:<40}: mark task of id as inccomplete""".format(
                                            default,
                                            all,
                                            add,
                                            delete,
                                            edit,
                                            days,
                                            completed,
                                            incomplete
                                        )

    print(statement)

def welcome():
    ascii_banner = pyfiglet.figlet_format("ToDo List")
    print(ascii_banner)

def main():
    # parse arguments
    args = sys.argv

    cxn = get_cxn()
    cursor = cxn.cursor()

    if len(args) == 1 or (len(args) == 2 and args[-1] == 'id'):
        welcome()
        cxn = get_cxn()
        cursor = cxn.cursor()
        query = """
                select id, task, finish_by, completed
                from tasks 
                where completed = false
                order by finish_by;
                """
        cursor.execute(query)
        rows = cursor.fetchall()

        # initialize tasks list
        tasks = Tasks(rows)
        if args[-1] == 'id':
            tasks.display(True)
        else:
            tasks.display()

    elif args[1] == 'all':
        welcome()
        query = """
                with done as (
                    select id, task, finish_by, completed
                    from tasks
                    where completed = true
                    order by finish_by desc
                    limit 10
                ), 
                todo as (
                    select id, task, finish_by, completed
                    from tasks 
                    where completed = false
                )
                select * from todo
                union
                select * from done
                order by completed desc, finish_by;
                """
        cursor.execute(query)
        rows = cursor.fetchall()

        # initialize tasks list
        tasks = Tasks(rows)
        if args[-1] == 'id':
            tasks.display(True)
        else:
            tasks.display()
    
    elif args[1] == 'add':
        days = args[3]
        task = args[2]

        query = """
                insert into 
                tasks (task, finish_by, completed) 
                values ('{}', date_add(current_date, interval {} day), 0);
                """.format(
                    task,
                    days
                )

        cursor.execute(query)
        cxn.commit()
    
    elif args[1] == 'delete':
        id = args[2]

        query = """
                delete from tasks
                where id = {};
                """.format(
                    id
                )

        cursor.execute(query)
        cxn.commit()

    elif args[1] == 'edit':
        id = args[2]
        task = args[3]

        query = """
                update tasks
                set task = '{}'
                where id = {};
                """.format(
                    task,
                    id
                )

        cursor.execute(query)
        cxn.commit()

    elif args[1] == 'days':
        id = args[2]
        days = args[3]

        query = """
                update tasks
                set finish_by = date_add(current_date, interval {} day)
                where id = {};
                """.format(
                    days,
                    id
                )

        cursor.execute(query)
        cxn.commit()

    elif args[1] == 'complete':
        id = args[2]

        query = """
                update tasks
                set completed = true
                where id = {};
                """.format(
                    id
                )

        cursor.execute(query)
        cxn.commit()

    elif args[1] == 'incomplete':
        id = args[2]

        query = """
                update tasks
                set completed = false
                where id = {};
                """.format(
                    id
                )

        cursor.execute(query)
        cxn.commit()
    
    elif args[1] == 'help':
        welcome()
        help()

    cxn.close()

if __name__ == '__main__':
    main()
